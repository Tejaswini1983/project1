import os
import pickle
import random
import datetime

class BankAccount:
    def __init__(self, account_number, holder_name, balance=0.0, account_type='savings'):
        self.account_number = account_number
        self.holder_name = holder_name
        self.balance = balance
        self.account_type = account_type
        self.transactions = []

    def deposit(self, amount):
        if amount > 0:
            self.balance += amount
            self.transactions.append(f"Deposited {amount} on {datetime.datetime.now()}")
            print(f"Deposited {amount}. New balance is {self.balance}.")
        else:
            print("Deposit amount must be positive.")

    def withdraw(self, amount):
        if amount > 0 and amount <= self.balance:
            self.balance -= amount
            self.transactions.append(f"Withdrew {amount} on {datetime.datetime.now()}")
            print(f"Withdrew {amount}. New balance is {self.balance}.")
        else:
            print("Invalid withdrawal amount.")

    def check_balance(self):
        print(f"Account Balance: {self.balance}")

    def display_account(self):
        print(f"Account Number: {self.account_number}")
        print(f"Account Holder: {self.holder_name}")
        print(f"Account Type: {self.account_type}")
        print(f"Balance: {self.balance}")
        print("Transaction History:")
        for transaction in self.transactions:
            print(transaction)

    def delete_account(self):
        print(f"Account {self.account_number} deleted.")
        del self

class Bank:
    def __init__(self):
        self.accounts = {}

    def create_account(self, holder_name, account_type='savings'):
        account_number = random.randint(100000, 999999)
        while account_number in self.accounts:
            account_number = random.randint(100000, 999999)
        new_account = BankAccount(account_number, holder_name, account_type=account_type)
        self.accounts[account_number] = new_account
        print(f"Account created successfully. Account Number: {account_number}")
        return new_account

    def delete_account(self, account_number):
        if account_number in self.accounts:
            self.accounts[account_number].delete_account()
            del self.accounts[account_number]
        else:
            print("Account not found.")

    def get_account(self, account_number):
        return self.accounts.get(account_number, None)

    def list_accounts(self):
        for account in self.accounts.values():
            account.display_account()

def main():
    bank = Bank()
    while True:
        print("\nBank Management System")
        print("1. Create Account")
        print("2. Delete Account")
        print("3. Deposit")
        print("4. Withdraw")
        print("5. Check Balance")
        print("6. Display Account")
        print("7. List All Accounts")
        print("8. Exit")
        choice = input("Enter choice: ")

        if choice == '1':
            holder_name = input("Enter account holder's name: ")
            account_type = input("Enter account type (savings/current): ").lower()
            bank.create_account(holder_name, account_type)

        elif choice == '2':
            account_number = int(input("Enter account number to delete: "))
            bank.delete_account(account_number)

        elif choice == '3':
            account_number = int(input("Enter account number: "))
            account = bank.get_account(account_number)
            if account:
                amount = float(input("Enter deposit amount: "))
                account.deposit(amount)
            else:
                print("Account not found.")

        elif choice == '4':
            account_number = int(input("Enter account number: "))
            account = bank.get_account(account_number)
            if account:
                amount = float(input("Enter withdrawal amount: "))
                account.withdraw(amount)
            else:
                print("Account not found.")

        elif choice == '5':
            account_number = int(input("Enter account number: "))
            account = bank.get_account(account_number)
            if account:
                account.check_balance()
            else:
                print("Account not found.")

        elif choice == '6':
            account_number = int(input("Enter account number: "))
            account = bank.get_account(account_number)
            if account:
                account.display_account()
            else:
                print("Account not found.")

        elif choice == '7':
            bank.list_accounts()

        elif choice == '8':
            print("Exiting system.")
            break

        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()
